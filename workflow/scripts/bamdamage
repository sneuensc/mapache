#!/usr/bin/perl

# Copyright (C) 2013,2014 Ole Tange, Mike DeGiorgio, Anna-Sapfo
# Malaspinas, Jose Victor Moreno-Mayar, Yong Wang and Free Software
# Foundation, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use Getopt::Long;

$Global::progname = "bamdamage";
$Global::version = "20140602_extended_bySam_20211025_faster_byDiana_20220502";

Getopt::Long::Configure("bundling");
my @retval = GetOptions
("debug|D" => \$opt::debug,
  "verbose|v" => \$opt::verbose,
  "help|h" => \$opt::help,
  "mapquality|m=i" => \$opt::mapq,
  "basequality|b=i" => \$opt::baseq,
  "rlength|r=i" => \$opt::rlength,
  "sample|s=s" => \$opt::sample,
  "version|V" => \$opt::version,
  "outputfile|output|o=s" => \$opt::output,
  "outputfile_length|output_length|O=s" => \$opt::output_length,
  "nth_read=s" => \$opt::nth_read,
  "plot_length=s" => \$opt::plot_length,
) or usage(1);

if($opt::help) { usage(0); }

if($opt::version) {
  version();
  exit(0);
}

if (@ARGV == 0) { usage(0); }

my $mapqual_lb = $opt::mapq || 30; # Default minimum mapping quality 30
my $seqqual_ub = 50; # Ignore qualities > 50
my $seqqual_os = 33; # quality score offset
my $seqqual_lb = $opt::baseq || 20; # Default minimum base quality 20
my $length_lb = 20;
my $length_ub = $opt::rlength || 100; # Max sequence length
my $position_ub = 80; # Max position
my $damage_ub = 20;
my $outfile = $opt::output;
my $outfile_length = $opt::output_length;
my $nth_read = $opt::nth_read || 1; # by default every read
my $plot_length = $opt::plot_length || 25; # damage plot: number of bases to plot from each end

my $file = $ARGV[0];

if(not defined($outfile)) {
  $outfile = $ARGV[0];
  $outfile =~ s:.*/::; # Remove full path
  $outfile =~ s/\.....?$//; # Remove extension if any
  $outfile .= ".dam.pdf";
  # print("default filename used: $outfile\n");
  
}

if(not defined($outfile_length)) {
  $outfile_length = $ARGV[0];
  $outfile_length =~ s:.*/::; # Remove full path
  $outfile_length =~ s/\.....?$//; # Remove extension if any
  $outfile_length .= ".length.pdf";
  # print("default filename used: $outfile_length\n");
  
}


my @out;


if($file and -r $file) {
  #open(IN,"-|","samtools","view","-h",$file) or error("Cannot read $file\n");
  open(IN,"-|","samtools view -h $file | sed -n '1~$nth_read p' ") or error("Cannot read $file\n");
  if($opt::debug) {
    open(OUT,">",$file.".stat") or error("Cannot write ${file}.stat\n");
  } else {
    open(OUT,">/dev/null") or error("Cannot write ${file}.stat\n");
  }
} else {
  usage(1);
  exit(1);
}

my %ACGT = ("A" => 0, "C" => 1, "G" => 2, "T" => 3);
my @count_by_length;
my @count_by_qual;
my @count_by_mut5;
my @count_by_mut3;
my @count_by_damage;

for(my $i=$seqqual_lb;$i<$seqqual_ub;$i++) {
  $count_by_qual[$i]=0;
}

for(my $i=$length_lb;$i<$length_ub;$i++) {
  $count_by_length[$i]=0;
}

for(my $i=0;$i<$damage_ub;$i++) {
  $count_by_damage[$i]=0;
}

for(my $i=0;$i<4;$i++) {
  for (my $j=0;$j<4;$j++) {
    for(my $k=0;$k<$position_ub;$k++){
      $count_by_mut5[$i][$j][$k]=0;
      $count_by_mut3[$i][$j][$k]=0;
    }
  }
}


my $line;
my $linecount = 0;
my $linecount2 = 0;
my $curres;
my $unparsable_warning_printed = 0;
my $unexpected_md_warning_printed = 0;
while ($line=<IN>) {
  if ($line=~/^@/) {
    if ($opt::debug) {print $line;}
    next;
  }
  
  ## take only every xth line (Sam 20.11.2019)
# commented by Diana (03.05.2022)
#  if ($linecount % $nth_read != 0) {
#    $linecount++;
#    next;
#  }
  
  #===== Extract Info =======#
  if($line =~ /^\S+\t(\S+)\t\S+\t\S+\t(\S+)\t(\S+)\t\S+\t\S+\t\S+\t(\S+)\t(\S+)\t/) {
    # The line parses: Go on
  } else {
    if($opt::verbose) {
      warning("This line is not parsable: $line");
    } else {
      if($unparsable_warning_printed++) {
        # skip
      } else {
        warning("The bam file contains unparsable lines. Use -v to see them.\n");
      }
    }
    next;
  }
  
  my $mapflag = $1;
  my $mapqual = $2;
  my $CIGAR = $3;
  my $read = $4;
  my $qual_string = $5;
  my $reverseflag = 0;
  if ($mapflag & 16) {
    $reverseflag=1;
  } else {
    $reverseflag=0;
  }
  
  # Maping quality too low
  if ($mapqual < $mapqual_lb) { next; }
  
  # Count length
  my $len = length($qual_string);
  my $hlen = $len;
  if ($hlen >= $length_ub) { $hlen = $length_ub - 1; }
  $count_by_length[$hlen]++;
  
  # Count sequencing quality
  my @usesite;
  for (my $i = 0; $i<$len; $i++) {
    my $ch = substr($qual_string,$i,1);
    my $qual = ord($ch) - $seqqual_os;
    if ($qual >= $seqqual_lb) {
      $usesite[$i]=1;
    } else {
      $usesite[$i]=0;
    }
    if ($qual >= $seqqual_ub) { $qual = $seqqual_ub-1; }
    $count_by_qual[$qual]++;
  }
  
  #===== Pharse CIGAR string to create a draft reference (with INDEL)  ========#
  my $CIGARBK = $CIGAR;
  my $ref = "";
  my $pos = 0;
  my $check = 0;
  my $nDAM = 0;
  
  my $cigar_expanded = "";
  
  #print "CIGAR:          $CIGAR \n";

  while (length($CIGAR)>0) {
    $CIGAR =~ s/^(\d+)([A-Z])//;
    my $seglen = $1;
    my $sym = uc($2);	
    if ($sym eq "M") {
      $ref .= substr($read,$pos,$seglen);
      $cigar_expanded = $cigar_expanded . ("M" x $seglen);
      $pos += $seglen;
    } elsif ($sym eq "I") {
      $ref .= "-" x $seglen;
      $cigar_expanded = $cigar_expanded . ("I" x $seglen);
      $pos += $seglen;
    } elsif ($sym eq "D") {
      # skip
    } elsif ($sym eq "N") {
      $ref .= "N" x $seglen;
      $cigar_expanded = $cigar_expanded . ("N" x $seglen);
      $pos += $seglen;
      $check = 1;
    } elsif ($sym eq "P") {
      $check = 1;
    } elsif ($sym eq "H") {
      $check = 1;
    } elsif ($sym eq "S") {
      $ref .= "N" x $seglen;
      $cigar_expanded = $cigar_expanded . ("S" x $seglen);
      $pos += $seglen;
      $check = 1;
    } else {
      $check = 1;
    }
  }
  
  #print "cigar_expanded: $cigar_expanded\n";


  #==== Pharse MD string to reverse mutation back to create final reference ======#
  #==== and counting the number of all matches/mismatches and damages ====#	
  $line =~ /MD:Z:(.*?)[\s\n]/;
  my $mismstr = $1;
  my $mismstrbk = $1;
  
  $mismstr=~s/^(\d+)//;
  my $matchl=$1;
  $pos = 0;
  my $count_CG=0;
  
  #print "matchl: $matchl\n";
  #print "mismstr: $mismstr\n\n";

  for(my $i=0; $i<$matchl;) {
    $curres = uc(substr($ref,$pos,1));
    #unless ($curres eq "-" || $curres eq "N") {$i++;}
    unless (substr($cigar_expanded, $pos, 1) ne "M") {$i++;}
    if ($usesite[$pos]) {
      if (($curres eq "C" && $reverseflag == 0) || ($curres eq "G" && $reverseflag == 1)) {
        $count_CG++;
      }
      if ($curres=~/[ACGT]/) {
        my $refno = $ACGT{$curres};
        if ($pos<$position_ub && $refno>=0) {
          unless ($reverseflag) {
            $count_by_mut5[$refno][$refno][$pos]++;
          } else {
            $count_by_mut3[3-$refno][3-$refno][$pos]++;
          }
        }
        my $pos3 = $len-$pos-1;
        if ($pos3<$position_ub && $pos3>=0 && $refno>=0) {
          unless ($reverseflag) {
            $count_by_mut3[$refno][$refno][$pos3]++;
          } else {
            $count_by_mut5[3-$refno][3-$refno][$pos3]++;
          }
        }
      }
    }
    $pos++;
  }
  
  #exit(0);

  while (length($mismstr)>0) {
    $mismstr=~s/^(.*?)(\d+)//;
    my $curstr=$1;
    my $matchl=$2;
    if ($curstr=~/\^/) {
      # skip
    } else {
      my $refres=uc(substr($ref,$pos,1));
      while(substr($cigar_expanded, $pos, 1) ne "M") {
        $pos++;
        $refres=uc(substr($ref,$pos,1));
      }	
      $refres = uc($curstr);
      #added the option to have an N nucleotide
      unless ($refres=~/[ACGTN]/) {
        if($unexpected_md_warning_printed++) {
          if($opt::verbose) {
            warning("unexpected MD string $mismstrbk $curstr $refres\n");
          }
        } else {
          warning("The bam file contains unexpected MD strings. Use -v to see them.\nIf you have used GATK to realign your reads followed by samtools calmd, this is to be expected.\n");
        }
      }
      my $readres = uc(substr($read,$pos,1));
      #added the option to have an N nucleotide
      unless ($readres=~/[ACGTN]/) {
        if($unexpected_md_warning_printed++) {
          if($opt::verbose) {
            warning("unexpected MD string $mismstrbk $read $readres\n");
          }
        } else {
          warning("The bam file contains unexpected MD strings. Use -v to see them.\nIf you have used GATK to realign your reads followed by samtools calmd, this is to be expected.\n");
        }
      }
      
      if ($usesite[$pos]) {
        if ( ($readres eq "T" && $refres eq "C" && $reverseflag == 0) 
             ||
             ($readres eq "    A" && $refres eq "G" && $reverseflag == 1)) {
          $nDAM++;
        }
        if (($readres eq "C" && $reverseflag==0)
            ||
            ($readres eq "G" && $reverseflag==1)) {
          $count_CG++;
        }
        my $readno = $ACGT{$readres};
        my $refno = $ACGT{$refres};
        if (defined($refno) and $pos < $position_ub && $refno >= 0 && $readno >= 0) {
          unless ($reverseflag) {
            $count_by_mut5[$readno][$refno][$pos]++;
          } else {
            $count_by_mut3[3-$readno][3-$refno][$pos]++;
          }
        }
        my $pos3 = $len-$pos-1;
        if (defined($refno) and $pos3<$position_ub && $pos3>=0 && $refno>=0 && $readno>=0) {
          unless ($reverseflag) {
            $count_by_mut3[$readno][$refno][$pos3]++;
          } else {
            $count_by_mut5[3-$readno][3-$refno][$pos3]++;
          }
        }
      }		
      substr($ref,$pos,1)=$refres;
      $pos++;
    }
    for(my $i=0; $i<$matchl;) {
      $curres=uc(substr($ref,$pos,1));	
      unless (substr($cigar_expanded, $pos, 1) ne "M") {$i++;}
      if ($usesite[$pos]) {
        if (($curres eq "C" && $reverseflag==0)||($curres eq "G" && $reverseflag==1)) {
          $count_CG++;
        }
        if ($curres =~ /[ACGT]/) {
          my $refno = $ACGT{$curres};
          if ($pos<$position_ub && $refno>=0) {
            unless ($reverseflag) {
              $count_by_mut5[$refno][$refno][$pos]++;
            } else {
              $count_by_mut3[3-$refno][3-$refno][$pos]++;
            }
          }
          my $pos3=$len-$pos-1;
          if ($pos3<$position_ub && $pos3>=0 && $refno>=0) {
            unless ($reverseflag) {
              $count_by_mut3[$refno][$refno][$pos3]++;
            } else {
              $count_by_mut5[3-$refno][3-$refno][$pos3]++;
            }
          }
        }
      }
      $pos++;
    }
  }
  
  #=== Print New SAM file with Reference ====#
  chomp($line);
  if ($opt::debug) {
    if ($nDAM>0) {
      warning("$line\t","$ref\n");	
    }
    if ($check==1) {
      warning("$CIGARBK\n",
              "$mismstrbk\n",
              "$read\n",
              "$ref\n\n",);
    }
  }
  
  #=== Calculate damage rate ======#
  if ($count_CG>0) {
    $nDAM = int($nDAM*100/$count_CG);
    if ($nDAM >= $damage_ub) { $nDAM = $damage_ub-1; }
    $count_by_damage[$nDAM]++;
  }        
  
  #=== On screen output: how many lines processed ====#
  $linecount++;
  $linecount2++;
  if($opt::verbose) {
    if (int($linecount/10000)*10000 == $linecount) {
      print STDERR "$linecount lines processed ($linecount2 recorded)\n";
    }
  }
}

for (my $i=$seqqual_lb;$i<$seqqual_ub;$i++) {
  print OUT "$i ";
  push @out, "$i ";
}
print OUT "\n";
push @out, "\n";
for (my $i=$seqqual_lb;$i<$seqqual_ub;$i++) {
  print OUT "$count_by_qual[$i] ";
  push @out, "$count_by_qual[$i] ";
}
print OUT "\n";
push @out, "\n";
#=== Output Read length Distribution =====#
for (my $i=$length_lb;$i<$length_ub;$i++) {
  print OUT "$i ";
  push @out, "$i ";
}
print OUT "\n";
push @out, "\n";
for (my $i=$length_lb;$i<$length_ub;$i++) {
  print OUT "$count_by_length[$i] ";
  push @out, "$count_by_length[$i] ";
}
print OUT "\n";
push @out, "\n";

#=== Output Damage Rate Distribution =====#
for (my $i=0;$i<$damage_ub;$i++) {
  print OUT "$i ";
  push @out, "$i ";
}
print OUT "\n";
push @out, "\n";
for (my $i=0;$i<$damage_ub;$i++) {
  print OUT "$count_by_damage[$i] ";
  push @out, "$count_by_damage[$i] ";
}
print OUT "\n";
push @out, "\n";

#=== Output Mismatch Patterns =====#
for (my $i=0;$i<4;$i++) {
  for (my $j=0;$j<4;$j++) {
    for(my $k=0;$k<$position_ub;$k++) {
      my $mutrate;
      my $totalres = $count_by_mut5[0][$j][$k] + $count_by_mut5[1][$j][$k] 
      + $count_by_mut5[2][$j][$k] + $count_by_mut5[3][$j][$k];
      if ($totalres==0) {
        $mutrate=0;
      } else {
        $mutrate=$count_by_mut5[$i][$j][$k]/$totalres;
      }
      print OUT "$mutrate ";
      push @out, "$mutrate ";
    }
    print OUT "\n";
    push @out, "\n";
  }
}

for (my $i=0;$i<4;$i++) {
  for (my $j=0;$j<4;$j++) {
    for(my $k=0;$k<$position_ub;$k++) {
      my $mutrate;
      my $totalres = $count_by_mut3[0][$j][$k] + $count_by_mut3[1][$j][$k]
      + $count_by_mut3[2][$j][$k] + $count_by_mut3[3][$j][$k];
      if ($totalres == 0) {
        $mutrate = 0;
      } else {
        $mutrate = $count_by_mut3[$i][$j][$k]/$totalres;
      }
      print OUT "$mutrate ";
      push @out, "$mutrate ";
    }
    print OUT "\n";
    push @out, "\n";
  }
}

close(IN);
close(OUT);

my $file_no_bam = $file;
$file_no_bam =~ s:.*/::; # Remove full path
$file_no_bam =~ s/\.bam$//i;
open(R,"|-","R --vanilla > /dev/null") || die;
print 
print R R_script($opt::sample||$file_no_bam, $outfile, $outfile_length, $plot_length, @out);
close R;

sub debug {
  # Returns: N/A
  $opt::debug or return;
  @_ = grep { defined $_ ? $_ : "" } @_;
  if($Global::fd{1}) {
    # Original stdout was saved
    my $stdout = $Global::fd{1};
    print $stdout @_;
  } else {
    print @_;
  }
}

sub version {
  # Returns: N/A
  print join("\n",
             "$Global::progname $Global::version",
             "Copyright (C) 2013,2014 Yong Wang, Ole Tange and Free Software Foundation, Inc.",
             "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>",
             "This is free software: you are free to change and redistribute it.",
             "GNU $Global::progname comes with no warranty.",
             "",
             "Web site: http://www.nongnu.org/software/bammds\n",
             "When using $Global::progname to process data for publication please cite:\n",
             "<<INSERT ARTICLE HERE>>\n",
  );
}

sub usage {
  my $exit = shift;
  #version();
  
  print "\nBAMDAMAGE\n",
  "bamdamage generates plots for the read length distribution and damage pattern distribution plots for the \n",
  "5' and 3' end. The input is a single bam file either passed via the command line or the standard input (stdin).\n\n";
 
  print "Usage:\n",
  "  bamdamage [--mapquality qual] [--basequality qual] [--sample name] file.bam\n",
  "  bamdamage [-m qual] [-b qual] [-s name] file.bam\n\n";
  
  print "Arguments\n",
  "  --mapquality|-m=i                        skip reads with mapping quality smaller than qual (30)\n",
  "  --basequality|-b=i                       skip bases with base quality smaller than qual (20)\n",
  "  --rlength|-r=i                           assumes reads are at most length (100)\n",
  "  --sample|-s=s                            use name for the legend in plots (default is the file name)\n",
  "  --outputfile|--output|-o=s               filename of damage plot (foo.dam.pdf)\n",
  "  --outputfile_length|--output_length|-O=s filename of length plot (foo.length.pdf)\n",
  "  --nth_read=i                             subsample: consider only every nth alignment (1; each alignment)\n",
  "  --plot_length=i                          damage plot: number of bases to plot from each end\n",
  "  --help|-h                                show this help\n",
  "  --debug|-D                               write debug information\n",
  "  --verbose|-v                             verbose output\n",
  "  --version|-V                             show version\n";
 
  exit($exit);
}

sub error {
  my @w = @_;
  my $fh = $Global::original_stderr || *STDERR;
  my $prog = $Global::progname || "bamdamage";
  print $fh $prog, ": Error: ", @w;
  exit(1);
}

sub warning {
  my @w = @_;
  my $fh = $Global::original_stderr || *STDERR;
  my $prog = $Global::progname || "bamdamage";
  print $fh $prog, ": Warning: ", @w;
}

sub R_script {
  my $sample_name = shift;
  my $pdffile = shift;
  my $pdffile_length = shift;
  my $plot_length = shift;
  my @values = @_;
  my @script =
    (
      qq(
        sample_name <- "$sample_name"
        pdfname <- "$pdffile"
        pdfname_length <- "$pdffile_length"
        plot_length <- "$plot_length"
        str <- "@values"),
      q(
        open_plot_file <- function(damage_file) {
          width_inches <- 6.26;
          height_inches <- 3.5;
          resolution <- 300
          if(grepl(".pdf$", damage_file, ignore.case = T)) {
            pdf(damage_file, height=height_inches, width=width_inches);
          } else if(grepl(".png$", damage_file, ignore.case = T)) {
            save_file <- gsub("(....)$", ".%1d\\\1", damage_file)
            png(save_file, height=height_inches, width= width_inches,units = 'in',res=resolution);
            pdfname <<- gsub("(....)$", ".*\\\1", damage_file)
          } else if(grepl(".svg$", damage_file, ignore.case = T)) {
            save_file <- gsub("(....)$", ".%1d\\\1", damage_file)
            svg(save_file, height=height_inches, width=width_inches);
            pdfname <<- gsub("(....)$", ".*\\\1", damage_file)
          } else if(grepl(".jpg$", damage_file, ignore.case = T)) {
            save_file <- gsub("(....)$", ".%1d\\\1", damage_file)
            jpeg(save_file, height=height_inches, width= width_inches,units = 'in',res=resolution);
            pdfname <<- gsub("(....)$", ".*\\\1", damage_file)
          } else if(grepl(".jpeg$", damage_file, ignore.case = T)) {
            save_file <- gsub("(.....)$", ".%1d\\\1", damage_file)
            jpeg(save_file, height=height_inches, width= width_inches,units = 'in',res=resolution);
            pdfname <<- gsub("(.....)$", ".*\\\1", damage_file)
          } else if(grepl(".tif$", damage_file, ignore.case = T)) {
            save_file <- gsub("(....)$", ".%1d\\\1", damage_file)
            tiff(save_file, height=height_inches, width= width_inches,units = 'in',res=resolution);
            pdfname <<- gsub("(....)$", ".*\\\1", damage_file)
          } else if(grepl(".tiff$", damage_file, ignore.case = T)) {
            save_file <- gsub("(.....)$", ".%1d\\\1", damage_file)
            tiff(save_file, height=height_inches, width= width_inches,units = 'in',res=resolution);
            pdfname <<- gsub("(.....)$", ".*\\\1", damage_file)
          } else {
            ## Unknown format
            error <- paste("Unknown plot format:",damage_file,"...will not produce any plot...");
            write(error, stderr());
            quit("no",1);
          }
        }
        
        open_plot_file(pdfname_length);
        
        saving=paste("Saved under: ",pdfname_length);
        write(saving, stderr());
        
        #-------------------------------------------------------------#
        ##plot of the read length distribution (updated 14.02.2024 to work with new version of R, there were conversion issues to get a numeric vector)
        par(mfrow=c(1,2),mar=c(2.5, 1.8, 2, 0.5),mgp=c(1,0.,0))
        ifn1 <- textConnection(str);
        data1<-read.table(ifn1,header=F,nrows=2,skip=2)
        values = as.numeric(data1[1,])
        counts = as.numeric(data1[2,])
        freqs = counts / sum(counts)
        average = sum(values * freqs)
        
        ## write table to file
        dd<-data.frame('length'=values, 'counts'=counts)
        write.csv(dd, gsub(".pdf", ".csv", pdfname_length), quote=F, row.names = FALSE)
                
        bp=barplot(counts,main="read length distribution",xlab="read length",ylab="frequency",col="dodgerblue4",
            names.arg=values,lwd=1,cex.axis=0.6,cex.lab=0.6,cex.main=0.8,axes=FALSE,axisnames=FALSE)        
        axis(2, cex.axis = 0.6,tck=-0.005)
        axis(1, at=bp,labels=values, cex.axis = 0.6,tick=FALSE)
        legend("topleft",paste(sample_name,", average: ",round(average,2),sep=""),fill="dodgerblue4",cex=0.6)
        
        dev.off()
        
        
        #--------------------------------------------------------------#
        open_plot_file(pdfname);
        
        saving=paste("Saved under: ",pdfname);
        write(saving, stderr());
        
        ## plot damage from 5 end
        par(mfrow=c(1,2),mar=c(2.5, 1.8, 2, 0.5),mgp=c(1,0.3,0))
        
        ifn1 <- textConnection(str);
        data1<-read.table(ifn1,header=F,nrows=16,skip=6)
        tmp <- t(data1)
        dam <- cbind(rowSums(tmp),tmp[,1:16])
        nda <- dam
        yma <- max(nda[1:25,c(3:6,8:11,13:16)])
        yma <- round(yma*1000+0.5)/1000
        xmax <- min(nrow(nda), as.numeric(plot_length))
        
        Colors = c("olivedrab3","deepskyblue1","violetred","olivedrab3","gold","darkorange","deepskyblue1","gold","darkblue","violetred","darkorange","darkblue")
        Linetypes = c(1,1,1,2,1,2,2,2,1,2,1,2)
        Patterns = c("C->A","G->A","T->A","A->C","G->C","T->C","A->G","C->G","T->G","A->T","C->T","G->T")
        LineW = c(1,3,1,1,1,1,1,1,1,1,3,1)
        
        dd<-nda[,c(3:6,8:11,13:16)]
        colnames(dd)<-Patterns
        rownames(dd)<-1:nrow(dd)
        write.csv(dd, gsub(".pdf", "_5prime.csv", pdfname), quote=F, row.names = TRUE)
        
        plot(nda[,3], main=paste("damage pattern 5' end",sample_name,sep=" "),xlab="position from 5' end",ylab="frequency",ylim=c(0,yma),col="black",type="l",lwd=0.0,cex.axis=0.6,cex.lab=0.6,cex.main=0.8,xlim=c(0,xmax));
        #points(nda[,4],type="l",col="deepskyblue1",lwd=2);
        #points(nda[,15],type="l",col="darkorange",lwd=2);
        count = 0;
        #16 point, but only 12 are plotted, so separate counter
        for (i in 2:17) {
          if (i!=2 && i!=7 && i!=12 && i!=17) {
            count=count+1;
            points(nda[,i],type="l",col=Colors[count],lty=Linetypes[count],lwd=LineW[count]);
          }
        }
        
        legend("topright",legend=Patterns,col=Colors,lwd=LineW,lty=Linetypes,cex=0.5,ncol=4);
        
        ifn1 <- textConnection(str);
        data1<-read.table(ifn1,header=F,nrows=16,skip=22)
        tmp <- t(data1)
        dam <- cbind(rowSums(tmp),tmp[,1:16])
        nda <- dam;
        yma <- max(nda[1:25,c(3:6,8:11,13:16)]);
        yma <- round(yma*1000+0.5)/1000;
        
        dd<-nda[,c(3:6,8:11,13:16)]
        colnames(dd)<-Patterns
        rownames(dd)<-1:nrow(dd)
        write.csv(dd, gsub(".pdf", "_3prime.csv", pdfname), quote=F, row.names = TRUE)
        
        plot(nda[,3], main=paste("damage pattern 3' end",sample_name,sep=" "),xlab="position from 3' end",ylab="frequency",ylim=c(0,yma),col=2,type="l",lwd=1,cex.axis=0.6,cex.lab=0.6,cex.main=0.8,xlim=c(xmax, 0));
        #points(nda[,4],type="l",col="deepskyblue1",lwd=2);
        #points(nda[,15],type="l",,col="darkorange",lwd=2);
        count = 0;
        for (i in 2:17) {
          if (i!=2 && i!=7 && i!=12 && i!=17) {
            count=count+1;
            points(nda[,i],type="l",col=Colors[count],lty=Linetypes[count],lwd=LineW[count]);
          }
        }
        legend("topleft",legend=Patterns,col=Colors,lwd=LineW,lty=Linetypes,cex=0.5,ncol=4);
        
        
        dev.off()
        
      ));
  
  return @script;
}
